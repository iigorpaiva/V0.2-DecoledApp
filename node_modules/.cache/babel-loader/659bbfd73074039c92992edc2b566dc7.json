{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from 'react-event-listener';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef } from '../utils/reactHelpers';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      mouseEvent = props.mouseEvent,\n      touchEvent = props.touchEvent,\n      onClickAway = props.onClickAway;\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = React.useCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  }, [mountedRef, onClickAway]);\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  var listenerProps = {};\n\n  if (mouseEvent !== false) {\n    listenerProps[mouseEvent] = handleClickAway;\n  }\n\n  if (touchEvent !== false) {\n    listenerProps[touchEvent] = handleClickAway;\n    listenerProps.onTouchMove = handleTouchMove;\n  }\n\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }), React.createElement(EventListener, _extends({\n    target: \"document\"\n  }, listenerProps)));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nexport default ClickAwayListener;","map":{"version":3,"sources":["/home/igor/Documentos/DECOLED/Decoled_V0.2/node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js"],"names":["_extends","React","ReactDOM","PropTypes","EventListener","ownerDocument","useForkRef","elementAcceptingRef","exactProp","useMountedRef","mountedRef","useRef","useEffect","current","ClickAwayListener","props","children","mouseEvent","touchEvent","onClickAway","movedRef","nodeRef","handleOwnRef","useCallback","instance","findDOMNode","handleRef","ref","handleClickAway","event","defaultPrevented","node","doc","documentElement","contains","target","handleTouchMove","listenerProps","onTouchMove","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","oneOf","func","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from 'react-event-listener';\nimport ownerDocument from '../utils/ownerDocument';\nimport { useForkRef } from '../utils/reactHelpers';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction useMountedRef() {\n  var mountedRef = React.useRef(false);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    return function () {\n      mountedRef.current = false;\n    };\n  }, []);\n  return mountedRef;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      mouseEvent = props.mouseEvent,\n      touchEvent = props.touchEvent,\n      onClickAway = props.onClickAway;\n  var mountedRef = useMountedRef();\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var handleClickAway = React.useCallback(function (event) {\n    // Ignore events that have been `event.preventDefault()` marked.\n    if (event.defaultPrevented) {\n      return;\n    } // IE 11 support, which trigger the handleClickAway even after the unbind\n\n\n    if (!mountedRef.current) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var node = nodeRef.current; // The child might render null.\n\n    if (!node) {\n      return;\n    }\n\n    var doc = ownerDocument(node);\n\n    if (doc.documentElement && doc.documentElement.contains(event.target) && !node.contains(event.target)) {\n      onClickAway(event);\n    }\n  }, [mountedRef, onClickAway]);\n  var handleTouchMove = React.useCallback(function () {\n    movedRef.current = true;\n  }, []);\n  var listenerProps = {};\n\n  if (mouseEvent !== false) {\n    listenerProps[mouseEvent] = handleClickAway;\n  }\n\n  if (touchEvent !== false) {\n    listenerProps[touchEvent] = handleClickAway;\n    listenerProps.onTouchMove = handleTouchMove;\n  }\n\n  return React.createElement(React.Fragment, null, React.cloneElement(children, {\n    ref: handleRef\n  }), React.createElement(EventListener, _extends({\n    target: \"document\"\n  }, listenerProps)));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   */\n  touchEvent: PropTypes.oneOf(['onTouchStart', 'onTouchEnd', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nClickAwayListener.defaultProps = {\n  mouseEvent: 'onMouseUp',\n  touchEvent: 'onTouchEnd'\n};\nexport default ClickAwayListener;"]},"metadata":{},"sourceType":"module"}