{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","handleChange1","led1","fetch","method","body","then","response","text","setState","handleChange2","led2","handleChangeControl","ledC","handleChange","newSchedule","horarios","JSON","stringify","json","schedule","state","ledon1","ledon2","Promise","all","res1","res2","res3","res4","setledstate1","setledstate2","this","layout","layoutGenerator","mobile","phablet","tablet","desktop","OnMobile","is","OnDesktop","isAtLeast","isAtMost","className","data-spy","data-target","data-offset","class","id","href","type","data-toggle","aria-controls","aria-expanded","aria-label","data-feather","src","logo","alt","onChange","value","size","showTooltip","gradientColorFrom","gradientColorTo","showPercentage","tooltipColor","stepSize","onToggle","handleStateChange1","handleStateChange2","selection","numDays","minTime","maxTime","selectedColor","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.1280ea17.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CircleSlider } from \"react-circle-slider\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport ToggleButton from \"react-toggle-button\";\nimport ScheduleSelector from \"react-schedule-selector\";\nimport { layoutGenerator } from \"react-break\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { led1: 0, led2: 0, ledC: 0, schedule: [],\n                   ledon1: false, ledon2: false };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\"/led1\"),\n      fetch(\"/led2\"),\n      fetch(\"/ledC\"),\n      fetch(\"/control\"),\n    ])\n      .then(([res1, res2, res3, res4 ]) =>\n        Promise.all([res1.text(), res2.text(), res3.text(), res4.json()])\n      )\n      .then(([led1, led2, ledC, schedule]) =>\n        this.setState({ led1, led2, ledC, schedule})\n      );\n\n    fetch(\"/ledon1\")\n      .then(response => response.text())\n      .then(state => this.setledstate1(state));\n    fetch(\"/ledon2\")\n      .then(response => response.text())\n      .then(state => this.setledstate2(state));\n  }\n\n  //------------------------- INTENSIDADE -------------------------------------------\n\n  handleChange1 = led1 => {\n    fetch(\"/led1\", { method: \"PUT\", body: led1 })\n      .then(response => response.text())\n      .then(this.setState({ led1 }));\n  };\n\n  handleChange2 = led2 => {\n    fetch(\"/led2\", { method: \"PUT\", body: led2 })\n      .then(response => response.text())\n      .then(this.setState({ led2 }));\n  };\n\n  //------------------------- INTENSIDADE CONTROLE ----------------------------------\n\n  handleChangeControl = ledC => {\n    fetch(\"/ledC\", { method: \"PUT\", body: ledC })\n      .then(response => response.text())\n      .then(this.setState({ ledC }));\n  };\n  \n  //------------------------- INTERVALOS CONTROLE  ----------------------------------\n\n  handleChange = newSchedule => {\n    const horarios = JSON.stringify(newSchedule);\n\n    fetch(\"/control\", { method: \"PUT\", body: horarios })\n      .then(response => response.json())\n      .then(this.setState({ schedule: newSchedule }));\n\n    //console.log(\"meu json eh: \", horarios);\n  };\n\n  // ------------------------- TOGGLES ----------------------------------------------\n\n  handleStateChange1(ledon1) {\n    fetch(\"/ledon1\", { method: \"PUT\", body: ledon1 ? \"0\" : \"1\" })\n      .then(response => response.text())\n      .then(state => this.setledstate1(state))\n  }\n\n  handleStateChange2(ledon2) {\n    fetch(\"/ledon2\", { method: \"PUT\", body: ledon2 ? \"0\" : \"1\" })\n      .then(response => response.text())\n      .then(state => this.setledstate2(state));\n  }\n\n  setledstate1(state) {\n    this.setState({ ledon1: state !== \"0\" });\n  }\n\n  setledstate2(state) {\n    this.setState({ ledon2: state !== \"0\" });\n  }\n\n\n  //------------------------- RENDER --------------------------------------------------\n\n  render() {\n    const layout = layoutGenerator({\n      mobile: 0,\n      phablet: 550,\n      tablet: 768,\n      desktop: 992\n    });\n\n  //------------------------- VERIFICA SE EH CELULAR, DESKTOP, TABLET -----------------\n\n    const OnMobile = layout.is(\"mobile\");\n    const OnAtLeastTablet = layout.isAtLeast(\"tablet\");\n    const OnAtMostPhablet = layout.isAtMost(\"phablet\");\n    const OnDesktop = layout.is(\"desktop\");\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <body data-spy=\"scroll\" data-target=\"#lambda-navbar\" data-offset=\"0\">\n            <nav\n              class=\"navbar navbar-expand-md navbar-dark navbar-transparent fixed-top sticky-navigation\"\n              id=\"lambda-navbar\"\n            >\n              <a class=\"navbar-brand\" href=\"\">\n                Decoled App\n              </a>\n              <button\n                class=\"navbar-toggler navbar-toggler-right border-0\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#navbarCollapse\"\n                aria-controls=\"navbarCollapse\"\n                aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"\n              >\n                <span data-feather=\"menu\"></span>\n              </button>\n              <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <ul class=\"navbar-nav ml-auto\">\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#principal\">\n                      Sala\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#hall\">\n                      Hall\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#controle\">\n                      Controle\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n          </body>\n\n          <section class=\"App-trans\" id=\"principal\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Sala</h1>\n            <RemoveScroll>\n              <CircleSlider\n                onChange={this.handleChange1}\n                value={this.state.led1}\n                size={150}\n                showTooltip={true}\n                gradientColorFrom=\"#009f5c\"\n                gradientColorTo=\"#006b5c\"\n                showPercentage={true}\n                tooltipColor=\"#6ab6e1\"\n                stepSize={20}\n              />\n              <h1 className=\"App-title-toggle\">Auto</h1>\n              <div className=\"Direita\">\n                <ToggleButton\n                  value={this.state.ledon1}\n                  onToggle={value => this.handleStateChange1(value)}\n                />\n              </div>\n            </RemoveScroll>\n          </section>\n          <section class=\"App-trans\" id=\"hall\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Hall</h1>\n            <RemoveScroll>\n              <CircleSlider\n                onChange={this.handleChange2}\n                value={this.state.led2}\n                size={150}\n                showTooltip={true}\n                gradientColorFrom=\"#009f5c\"\n                gradientColorTo=\"#006b5c\"\n                showPercentage={true}\n                tooltipColor=\"#6ab6e1\"\n                stepSize={20}\n              />\n              <h1 className=\"App-title-toggle\">Auto</h1>\n              <div className=\"Direita\">\n                <ToggleButton\n                  value={this.state.ledon2}\n                  onToggle={value => this.handleStateChange2(value)}\n                />\n            </div>\n            </RemoveScroll>\n          </section>\n          <section class=\"App-trans\" id=\"controle\">\n            <OnDesktop>\n              <ScheduleSelector\n                selection={this.state.schedule}\n                numDays={20}\n                minTime={17}\n                maxTime={23}\n                onChange={this.handleChange}\n                selectedColor=\"#14a806\"\n                margin={2}\n              />\n            </OnDesktop>\n            <OnMobile>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <h1 className=\"App-title\">Controle</h1>\n            </OnMobile>\n            <CircleSlider\n              onChange={this.handleChangeControl}\n              value={this.state.ledC}\n              size={150}\n              showTooltip={true}\n              gradientColorFrom=\"#009f5c\"\n              gradientColorTo=\"#006b5c\"\n              showPercentage={true}\n              tooltipColor=\"#6ab6e1\"\n              stepSize={20}\n            />\n          </section>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c67d3419.svg\";"],"sourceRoot":""}