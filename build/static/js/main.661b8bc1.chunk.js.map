{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleChange1","led1","fetch","method","body","then","response","text","setState","handleChange2","led2","handleChangeTime1","time1","console","log","handleChangeTime2","time2","state","Promise","all","res1","res2","res3","res4","className","data-spy","data-target","data-offset","class","id","href","type","data-toggle","aria-controls","aria-expanded","aria-label","data-feather","src","logo","alt","onChange","this","value","size","showTooltip","gradientColorFrom","gradientColorTo","showPercentage","tooltipColor","stepSize","defaultTime","bind","color","inputVisible","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.661b8bc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c67d3419.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CircleSlider } from \"react-circle-slider\";\nimport { RemoveScroll } from \"react-remove-scroll\";\n\nimport JTimepicker from \"reactjs-timepicker\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { led1: 0, led2: 0, time1: \"00:00\", time2: \"00:00\"};\n  }\n\n  componentDidMount(){\n    Promise.all([\n        fetch('/led1'),\n        fetch('/led2'),\n        fetch('/time1'),\n        fetch('/time2')\n    ])\n    .then(([res1, res2, res3, res4]) => Promise.all([res1.text(), res2.text(), res3.text(), res4.text()]))\n    .then(([led1, led2, time1, time2]) => this.setState({led1, led2, time1, time2}))\n  }\n\n  handleChange1 = led1 => {\n    fetch(\"/led1\", { method: \"PUT\", body: led1 })\n      .then(response => response.text())\n      .then(this.setState({ led1 }));\n  };\n\n  handleChange2 = led2 => {\n    fetch(\"/led2\", { method: \"PUT\", body: led2 })\n      .then(response => response.text())\n      .then(this.setState({ led2 }));\n  };\n\n  /*handleChangeRange = event => {\n    this.setState({\n      led1: event.target.valueAsNumber,\n      led2: event.target.valueAsNumber\n    });\n  };*/\n\n  handleChangeTime1 = time1 => {\n    fetch(\"/time1\", { method: \"PUT\", body: time1 })\n      .then(response => response.text())\n      .then(this.setState({ time1 }))\n      .then(console.log(time1));\n  };\n\n  handleChangeTime2 = time2 => {\n    fetch(\"/time2\", { method: \"PUT\", body: time2 })\n      .then(response => response.text())\n      .then(this.setState({ time2 }))\n      .then(console.log(time2));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <body data-spy=\"scroll\" data-target=\"#lambda-navbar\" data-offset=\"0\">\n            <nav\n              class=\"navbar navbar-expand-md navbar-dark navbar-transparent fixed-top sticky-navigation\"\n              id=\"lambda-navbar\"\n            >\n              <a class=\"navbar-brand\" href=\"\">\n                Decoled App\n              </a>\n              <button\n                class=\"navbar-toggler navbar-toggler-right border-0\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#navbarCollapse\"\n                aria-controls=\"navbarCollapse\"\n                aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"\n              >\n                <span data-feather=\"menu\"></span>\n              </button>\n              <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <ul class=\"navbar-nav ml-auto\">\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#principal\">\n                      Sala\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#hall\">\n                      Hall\n                    </a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link page-scroll\" href=\"#controle\">\n                      Controle\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n          </body>\n\n          <section class=\"App-trans\" id=\"principal\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Sala</h1>\n            <RemoveScroll>\n              <CircleSlider\n                onChange={this.handleChange1}\n                value={this.state.led1}\n                size={150}\n                showTooltip={true}\n                gradientColorFrom=\"#009f5c\"\n                gradientColorTo=\"#006b5c\"\n                showPercentage={true}\n                tooltipColor=\"#6ab6e1\"\n                stepSize={20}\n              />\n            </RemoveScroll>\n          </section>\n          <section class=\"App-trans\" id=\"hall\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Hall</h1>\n            <RemoveScroll>\n              <CircleSlider\n                onChange={this.handleChange2}\n                value={this.state.led2}\n                size={140}\n                showTooltip={true}\n                gradientColorFrom=\"#009f5c\"\n                gradientColorTo=\"#006b5c\"\n                showPercentage={true}\n                tooltipColor=\"#6ab6e1\"\n                stepSize={20}\n              />\n            </RemoveScroll>\n          </section>\n          <section class=\"App-trans\" id=\"controle\">\n            <RemoveScroll>\n              <h1 className=\"App-title\">In√≠cio</h1>\n              <JTimepicker\n                defaultTime={this.state.time1}\n                onChange={this.handleChangeTime1.bind(this)}\n                color=\"#072c07\"\n                inputVisible={true}\n              />\n              <h1 className=\"App-title\">Final</h1>\n              <JTimepicker\n                defaultTime={this.state.time2}\n                onChange={this.handleChangeTime2.bind(this)}\n                color=\"#072c07\"\n                inputVisible={true}\n              />\n            </RemoveScroll>\n          </section>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}